<#@ template Debug="True" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ VSPackageDesigner processor="VSPackageDesignerDirectiveProcessor" requires="fileName='..\IBR.StringResourceBuilder2011.vspackage'" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.InteropServices;
using System.ComponentModel.Design;
using Microsoft.Win32;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.OLE.Interop;
using Microsoft.VisualStudio.Shell;

namespace <#= this.Root.CommandTable.SafeProjectName #>
{
  /// <summary>
  /// This is the class that implements the package exposed by this assembly.
  ///
  /// The minimum requirement for a class to be considered a valid package for Visual Studio
  /// is to implement the IVsPackage interface and register itself with the shell.
  /// This package uses the helper classes defined inside the Managed Package Framework (MPF)
  /// to do it: it derives from the Package class that provides the implementation of the
  /// IVsPackage interface and uses the registration attributes defined in the framework to
  /// register itself and its components with the shell.
  /// </summary>
  // This attribute tells the PkgDef creation utility (CreatePkgDef.exe) that this class is
  // a package.
  [PackageRegistration(UseManagedResourcesOnly = true)]
  // This attribute is used to register the informations needed to show the this package
  // in the Help/About dialog of Visual Studio.
  [InstalledProductRegistration("#110", "#112", "1.0", IconResourceID = 400)]
  // This attribute is needed to let the shell know that this package exposes some menus.
  [ProvideMenuResource("Menus.ctmenu", 1)]
<#
  foreach(var toolWindow in this.Root.UserInterface.ToolWindows)
  {
    var windowGuid = GetWindowGuid(toolWindow);
#>
  [ProvideToolWindow(typeof(<#= toolWindow.Name #>ToolWindow), Orientation=ToolWindowOrientation.<#= toolWindow.Orientation.ToString() #>, Style=VsDockStyle.<#= toolWindow.Style.ToString() #>, MultiInstances = <#= toolWindow.MultiInstance.ToString().ToLower() #>, Transient = <#= toolWindow.Transient.ToString().ToLower() #><# if(toolWindow.Left > 0) { #>, PositionX = <#= toolWindow.Left #> <# } #><# if(toolWindow.Top > 0) { #>, PositionY = <#= toolWindow.Top #> <# } #><# if(toolWindow.Width > 0) { #>, Width = <#= toolWindow.Width #> <# } #><# if(toolWindow.Height > 0) { #>, Height = <#= toolWindow.Height #> <# } #><# if(!string.IsNullOrEmpty(windowGuid)) { #>, Window = /* <#= toolWindow.Window #> */ "<#= windowGuid #>" <# } #>)]
<#
    if((int)toolWindow.VisibilityConstraints != 0)
    {
      foreach (var str in toolWindow.VisibilityConstraints.ToString().Split(','))
      {
#>
  [ProvideToolWindowVisibility(typeof(<#= toolWindow.Name #>ToolWindow), <#= this.GetVisibilityContraintGuidString(str.Trim()) #>)]
<#
      }
    }
#>
<#
    if(!string.IsNullOrEmpty(toolWindow.CustomVisibility))
    {
      foreach (var str in toolWindow.CustomVisibility.ToString().Split('|'))
      {
#>
  [ProvideToolWindowVisibility(typeof(<#= toolWindow.Name #>ToolWindow), "<#= str #>")]
<#
      }
    }
  }
#>
  [Guid(GuidList.guid<#= this.Root.CommandTable.SafeProjectName.Replace(".", string.Empty) #>PkgString)]
  public abstract class <#= this.Root.CommandTable.SafeProjectName.Replace(".", string.Empty) #>PackageBase : Package
  {
<#
  if (this.Root.CommandTable.Combos.Count > 0)
  {
    foreach (var combo in this.Root.CommandTable.Combos)
    {
      if (!combo.SampleData)
        continue;
#>
    private string[] <#= combo.Name #>Choices = {"One", "Two", "Three"};
    private <#= combo.Type == ComboType.IndexCombo ? "int" : "string" #> current<#= combo.Name #>Choice;
<#
      if (combo.Type == ComboType.DynamicCombo)
      {
#>
    private double <#= combo.Name #>ZoomFactor = 1.0;
    private string[] <#= combo.Name #>ZoomLevels = null;
    private NumberFormatInfo <#= combo.Name #>NumberFormatInfo;
    private double[] <#= combo.Name #>NumericZoomLevels = { 4.0, 3.0, 2.0, 1.5, 1.25, 1.0, .75, .66, .50, .33, .25, .10 };
<#
      }
    }
#>

<#
  }
#>
    /// <summary>
    /// Default constructor of the package.
    /// Inside this method you can place any initialization code that does not require
    /// any Visual Studio service because at this point the package object is created but
    /// not sited yet inside Visual Studio environment. The place to do all the other
    /// initialization is the Initialize method.
    /// </summary>
    public <#= this.Root.CommandTable.SafeProjectName.Replace(".", string.Empty) #>PackageBase()
    {
      Trace.WriteLine(string.Format(CultureInfo.CurrentCulture, "Entering constructor for: {0}", this.ToString()));
    }

    /////////////////////////////////////////////////////////////////////////////
    // Overridden Package Implementation

    #region Package Members

    /// <summary>
    /// Initialization of the package; this method is called right after the package is sited, so this is the place
    /// where you can put all the initialization code that rely on services provided by VisualStudio.
    /// </summary>
    protected override void Initialize()
    {
      Trace.WriteLine (string.Format(CultureInfo.CurrentCulture, "Entering Initialize() of: {0}", this.ToString()));
      base.Initialize();
<#
  if (this.Root.CommandTable.Buttons.Count > 0 || this.Root.CommandTable.Combos.Count > 0)
  {
#>

      // Add our command handlers for menu (commands must exist in the .vsct file)
      OleMenuCommandService mcs = GetService(typeof(IMenuCommandService)) as OleMenuCommandService;
      if ( null != mcs )
      {
        CommandID commandId;
        OleMenuCommand menuItem;
<#
    foreach (var button in this.Root.CommandTable.Buttons)
    {					
#>

        // Create the command for button <#= button.Name #>
        commandId = new CommandID(GuidList.guid<#= this.Root.CommandTable.SafeProjectName.Replace(".", string.Empty) #>CmdSet, (int)PkgCmdIDList.<#= button.Name #>);
        menuItem = new OleMenuCommand(<#= button.Name+"ExecuteHandler" #>, <#= button.Name+"ChangeHandler" #>, <#= button.Name+"QueryStatusHandler" #>, commandId);
        mcs.AddCommand(menuItem);
<#
    }
    foreach (var combo in this.Root.CommandTable.Combos)
    {
#>

        // Create the command for combo <#= combo.Name #>
        commandId = new CommandID(GuidList.guid<#= this.Root.CommandTable.SafeProjectName.Replace(".", string.Empty) #>CmdSet, (int)PkgCmdIDList.<#= combo.Name #>);
        menuItem = new OleMenuCommand(<#= combo.Name+"ExecuteHandler" #>, <#= combo.Name+"ChangeHandler" #>, <#= combo.Name+"QueryStatusHandler" #>, commandId);
        menuItem.ParametersDescription = "$"; // accept any argument string
        mcs.AddCommand(menuItem);
<#
      if (combo.Type != ComboType.MRUCombo)
      {
#>

        // Create the command for combo GetList <#= combo.Name #>
        commandId = new CommandID(GuidList.guid<#= this.Root.CommandTable.SafeProjectName.Replace(".", string.Empty) #>CmdSet, (int)PkgCmdIDList.<#= combo.Name #>GetList);
        menuItem = new OleMenuCommand(<#= combo.Name+"GetListExecuteHandler" #>, <#= combo.Name+"GetListChangeHandler" #>, <#= combo.Name+"GetListQueryStatusHandler" #>, commandId);
        mcs.AddCommand(menuItem);				
<#    }
    }
#>
      } //if
<#
  }
#>
    }

    #endregion
<#
  if (this.Root.CommandTable.Buttons.Count > 0)
  {
    foreach (var button in this.Root.CommandTable.Buttons)
    {
#>

    #region Handlers for Button: <#= button.Name #>

    protected virtual void <#= button.Name + "ExecuteHandler" #>(object sender, EventArgs e)
    {
<#
    if (button.SampleData)
    {
      if (button.ToolWindows.Count > 0)
      {
#>
      ShowToolWindow<#= button.ToolWindows[0].Name #>(sender, e);
<#
      }
      else
      {
#>
      ShowMessage("<#= button.Name #> clicked!");
<#
      }
    }
#>
    }

    protected virtual void <#= button.Name + "ChangeHandler" #>(object sender, EventArgs e)
    {
    }

    protected virtual void <#= button.Name + "QueryStatusHandler" #>(object sender, EventArgs e)
    {
    }

    #endregion
<#
    }
  }

  if (this.Root.CommandTable.Combos.Count > 0)
  {
    foreach (var combo in this.Root.CommandTable.Combos)
    {
#>

    #region Handlers for Combo: <#= combo.Name #>

    protected virtual void <#= combo.Name + "ExecuteHandler" #>(object sender, EventArgs e)
    {
<#
      if (combo.Type == ComboType.DropDownCombo && combo.SampleData)
      {
#>
      if (e == EventArgs.Empty)
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //if

      OleMenuCmdEventArgs eventArgs = e as OleMenuCmdEventArgs;

      if (eventArgs != null)
      {
        string newChoice = eventArgs.InValue as string;
        IntPtr vOut = eventArgs.OutValue;

        if (vOut != IntPtr.Zero && newChoice != null)
        {
          throw (new ArgumentException("Both in and out parameters can not be NULL")); // force an exception to be thrown
        }
        else if (vOut != IntPtr.Zero)
        {
          // when vOut is non-NULL, the IDE is requesting the current value for the combo
          Marshal.GetNativeVariantForObject(current<#= combo.Name #>Choice, vOut);
        }
        else if (newChoice != null)
        {
          // new value was selected or typed in
          // see if it is one of our items
          bool validInput = false;
          int indexInput = -1;
          for (indexInput = 0; indexInput < <#= combo.Name #>Choices.Length; indexInput++)
          {
            if (String.Compare(<#= combo.Name #>Choices[indexInput], newChoice, StringComparison.CurrentCultureIgnoreCase) == 0)
            {
              validInput = true;
              break;
            } //if
          } //for

          if (validInput)
          {
            this.current<#= combo.Name #>Choice = <#= combo.Name #>Choices[indexInput];
            ShowMessage(String.Format("<#= combo.Name #>: {0}", this.current<#= combo.Name #>Choice));
          }
          else
          {
            throw (new ArgumentException("Parameter must be valid string in list")); // force an exception to be thrown
          } //else
        }
        else
        {
          // We should never get here
          throw (new ArgumentException("Both in and out parameters can not be NULL")); // force an exception to be thrown
        } //else
      }
      else
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //else
<#
      }
      else if(combo.Type == ComboType.MRUCombo && combo.SampleData)
      {
#>
      if (e == EventArgs.Empty)
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //if

      OleMenuCmdEventArgs eventArgs = e as OleMenuCmdEventArgs;

      if (eventArgs != null)
      {
        object input = eventArgs.InValue;
        IntPtr vOut = eventArgs.OutValue;

        if (vOut != IntPtr.Zero && input != null)
        {
          throw (new ArgumentException("Both in and out parameters should not be specified")); // force an exception to be thrown
        }
        else if (vOut != IntPtr.Zero)
        {
          // when vOut is non-NULL, the IDE is requesting the current value for the combo
          Marshal.GetNativeVariantForObject(this.current<#= combo.Name #>Choice, vOut);
        }
        else if (input != null)
        {
          string newChoice = input.ToString();

          // new value was selected or typed in
          if (!string.IsNullOrEmpty(newChoice))
          {
            this.current<#= combo.Name #>Choice = newChoice;
            ShowMessage(String.Format("<#= combo.Name #>: {0}", this.current<#= combo.Name #>Choice));
          }
          else
          {
            // We should never get here
            throw (new ArgumentException("Empty string is not accepted")); // force an exception to be thrown
          } //else
        }
        else
        {
          throw (new ArgumentException("Both in and out parameters should not be specified")); // force an exception to be thrown
        } //else
      }
      else
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //else

<#
      }
      else if(combo.Type == ComboType.DynamicCombo && combo.SampleData)
      {
#>
      if ((null == e) || (e == EventArgs.Empty))
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //if

      OleMenuCmdEventArgs eventArgs = e as OleMenuCmdEventArgs;

      if (eventArgs != null)
      {
        object input = eventArgs.InValue;
        IntPtr vOut = eventArgs.OutValue;

        if (vOut != IntPtr.Zero && input != null)
        {
          throw (new ArgumentException("Both in and out parameters should not be specified")); // force an exception to be thrown
        }
        else if (vOut != IntPtr.Zero)
        {
          // when vOut is non-NULL, the IDE is requesting the current value for the combo
          if (<#= combo.Name #>ZoomFactor == 0)
          {
            Marshal.GetNativeVariantForObject("Zoom to Fit", vOut);
          }
          else
          {
            string factorString = <#= combo.Name #>ZoomFactor.ToString("P0", this.<#= combo.Name #>NumberFormatInfo);
            Marshal.GetNativeVariantForObject(factorString, vOut);
          } //else
        }
        else if (input != null)
        {
          // new zoom value was selected or typed in
          string inputString = input.ToString();

          if (inputString.Equals("ZoomToFit") || inputString.Equals("Zoom To Fit"))
          {
            <#= combo.Name #>ZoomFactor = 0;
            ShowMessage(String.Format("<#= combo.Name #>: {0}", this.current<#= combo.Name #>Choice, "Zoom to Fit"));
          }
          else
          {
            // There doesn't appear to be any percent-parsing routines in the framework (even though you can create
            // a localized percentage in a string!).  So, we need to remove any occurence of the localized Percent
            // symbol, then parse the value that's left
            try
            {
              float newZoom = Single.Parse(inputString.Replace(NumberFormatInfo.InvariantInfo.PercentSymbol, ""), CultureInfo.CurrentCulture);

              newZoom = (float)Math.Round(newZoom);

              if (newZoom < 0)
                throw (new ArgumentException("Zoom factor must be > 0")); // force an exception to be thrown

              <#= combo.Name #>ZoomFactor = newZoom / (float)100.0;

              ShowMessage(String.Format("<#= combo.Name #>: {0}, {1}", this.current<#= combo.Name #>Choice, newZoom.ToString(CultureInfo.CurrentCulture)));
            }
            catch (FormatException)
            {
              // user typed in a non-numeric value, ignore it
            }
            catch (OverflowException)
            {
              // user typed in too large of a number, ignore it
            }
          } //else
        }
        else
        {
          // We should never get here
          throw (new ArgumentException("Both in and out parameters should not be specified")); // force an exception to be thrown
        } //else
      }
      else
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //else
<#
      }
      else if(combo.Type == ComboType.IndexCombo && combo.SampleData)
      {
#>
      if ((null == e) || (e == EventArgs.Empty))
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //if

      OleMenuCmdEventArgs eventArgs = e as OleMenuCmdEventArgs;

      if (eventArgs != null)
      {
        object input = eventArgs.InValue;
        IntPtr vOut = eventArgs.OutValue;

        if (vOut != IntPtr.Zero && input != null)
          throw (new ArgumentException("Both in and out parameters should not be specified")); // force an exception to be thrown

        if (vOut != IntPtr.Zero)
        {
          // when vOut is non-NULL, the IDE is requesting the current value for the combo
          Marshal.GetNativeVariantForObject(this.<#= combo.Name#>Choices[this.current<#= combo.Name #>Choice], vOut);
        } //if

        else if (input != null)
        {
          int newChoice = -1;
          try
          {
            // user typed a string argument in command window.
            int index = int.Parse(input.ToString(), CultureInfo.CurrentCulture);
            if (index >= 0 && index < <#= combo.Name#>Choices.Length)
            {
              newChoice = index;
            }
            else
            {
              string errorMessage = string.Format(CultureInfo.CurrentCulture, "Value should be between 0 and {0}", <#= combo.Name#>Choices.Length);
              throw (new ArgumentOutOfRangeException(errorMessage));
            } //else
          }
          catch (FormatException)
          {
            // user typed in a non-numeric value, see if it is one of our items
            for (int i = 0; i < <#= combo.Name#>Choices.Length; i++)
            {
              if (String.Compare(<#= combo.Name#>Choices[i], input.ToString(), StringComparison.CurrentCultureIgnoreCase) == 0)
              {
                newChoice = i;
                break;
              } //if
            } //for
          }
          catch (OverflowException)
          {
            // user typed in too large of a number, ignore it
          }

          // new value was selected or typed in
          if (newChoice != -1)
          {
            this.current<#= combo.Name #>Choice = newChoice;
            ShowMessage(String.Format("<#= combo.Name #>, {0}", this.current<#= combo.Name #>Choice.ToString(CultureInfo.CurrentCulture)));
          }
          else
          {
            throw (new ArgumentException("Parameter must be either index or valid string in list")); // force an exception to be thrown
          } //else
        }
        else
        {
          // We should never get here; EventArgs are required.
          throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
        } //else
      }
      else
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentException("EventArgs are required")); // force an exception to be thrown
      } //else
<#
      }
#>
    }

    protected virtual void <#= combo.Name + "ChangeHandler" #>(object sender, EventArgs e)
    {
    }

    protected virtual void <#= combo.Name + "QueryStatusHandler" #>(object sender, EventArgs e)
    {
    }
<#
      if (combo.Type == ComboType.MRUCombo)
      {
        WriteLine("#endregion");
        continue;
      }
#>

    protected virtual void <#= combo.Name + "GetListExecuteHandler" #>(object sender, EventArgs e)
    {
<#
      if ((combo.Type == ComboType.DropDownCombo || combo.Type == ComboType.IndexCombo) && combo.SampleData)
      {
#>
      if ((null == e) || (e == EventArgs.Empty))
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentNullException("EventArgs are required")); // force an exception to be thrown
      } //if

      OleMenuCmdEventArgs eventArgs = e as OleMenuCmdEventArgs;

      if (eventArgs != null)
      {
        object inParam = eventArgs.InValue;
        IntPtr vOut = eventArgs.OutValue;

        if (inParam != null)
        {
          throw (new ArgumentException("In parameter may not be specified")); // force an exception to be thrown
        }
        else if (vOut != IntPtr.Zero)
        {
          Marshal.GetNativeVariantForObject(this.<#= combo.Name #>Choices, vOut);
        }
        else
        {
          throw (new ArgumentException("Out parameter can not be NULL")); // force an exception to be thrown
        } //else
      } //if
<#
      }
      else if(combo.Type == ComboType.DynamicCombo && combo.SampleData)
      {
#>
      if ((null == e) || (e == EventArgs.Empty))
      {
        // We should never get here; EventArgs are required.
        throw (new ArgumentNullException("EventArgs are required")); // force an exception to be thrown
      } //if

      OleMenuCmdEventArgs eventArgs = e as OleMenuCmdEventArgs;

      if (eventArgs != null)
      {
        object inParam = eventArgs.InValue;
        IntPtr vOut = eventArgs.OutValue;

        if (inParam != null)
        {
          throw (new ArgumentException("In parameter may not be specified")); // force an exception to be thrown
        }
        else if (vOut != IntPtr.Zero)
        {
          // initialize the zoom value array if needed
          if (<#= combo.Name #>ZoomLevels == null)
          {
            this.<#= combo.Name #>NumberFormatInfo = (NumberFormatInfo)CultureInfo.CurrentUICulture.NumberFormat.Clone();
            if (this.<#= combo.Name #>NumberFormatInfo.PercentPositivePattern == 0)
              this.<#= combo.Name #>NumberFormatInfo.PercentPositivePattern = 1;
            if (this.<#= combo.Name #>NumberFormatInfo.PercentNegativePattern == 0)
              this.<#= combo.Name #>NumberFormatInfo.PercentNegativePattern = 1;

            <#= combo.Name #>ZoomLevels = new String[<#= combo.Name #>NumericZoomLevels.Length + 1];
            for (int i = 0; i < <#= combo.Name #>NumericZoomLevels.Length; i++)
              <#= combo.Name #>ZoomLevels[i] = <#= combo.Name #>NumericZoomLevels[i].ToString("P0", this.<#= combo.Name #>NumberFormatInfo);

            <#= combo.Name #>ZoomLevels[<#= combo.Name #>ZoomLevels.Length - 1] = "Zoom to Fit";
          } //if

          Marshal.GetNativeVariantForObject(<#= combo.Name #>ZoomLevels, vOut);
        }
        else
        {
          throw (new ArgumentException("Out parameter can not be NULL")); // force an exception to be thrown
        } //else
      } //if
<#
      }
#>
    }

    protected virtual void <#= combo.Name + "GetListChangeHandler" #>(object sender, EventArgs e)
    {
    }

    protected virtual void <#= combo.Name + "GetListQueryStatusHandler" #>(object sender, EventArgs e)
    {
    }

    #endregion
<#
    }
  }

  foreach (var toolWindow in this.Root.UserInterface.ToolWindows)
  {
#>

    /// <summary>
    /// This function is called when the user clicks the menu item that shows the
    /// tool window. See the Initialize method to see how the menu item is associated to
    /// this function using the OleMenuCommandService service and the MenuCommand class.
    /// </summary>
    private void ShowToolWindow<#= toolWindow.Name #>(object sender, EventArgs e)
    {
      // Get the instance number 0 of this tool window. This window is single instance so this instance
      // is actually the only one.
      // The last flag is set to true so that if the tool window does not exists it will be created.
      ToolWindowPane window = this.FindToolWindow(typeof(<#= toolWindow.Name #>ToolWindow), 0, true);
      if ((null == window) || (null == window.Frame))
        throw new NotSupportedException(String.Format("Can not create Toolwindow: <#= toolWindow.Name #>"));

      IVsWindowFrame windowFrame = (IVsWindowFrame)window.Frame;
      Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(windowFrame.Show());
    }
<#
  }
#>

    /// <summary>
    /// This function is the callback used to execute a command when the a menu item is clicked.
    /// See the Initialize method to see how the menu item is associated to this function using
    /// the OleMenuCommandService service and the MenuCommand class.
    /// </summary>
    protected void ShowMessage(string message)
    {
      // Show a Message Box to prove we were here
      IVsUIShell uiShell = (IVsUIShell)GetService(typeof(SVsUIShell));
      Guid clsid = Guid.Empty;
      int result;
      Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(uiShell.ShowMessageBox(
             0,
             ref clsid,
             "<#= this.Root.CommandTable.SafeProjectName #>",
             string.Format(CultureInfo.CurrentCulture, message, this.ToString()),
             string.Empty,
             0,
             OLEMSGBUTTON.OLEMSGBUTTON_OK,
             OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FIRST,
             OLEMSGICON.OLEMSGICON_INFO,
             0,    // false
             out result));
    }
  } //class
} //namespace
<#+
  string GetVisibilityContraintGuidString(string name)
  {
    if (name == "TextEditor")
    return "VSConstants.VsEditorFactoryGuid.TextEditor_string";
    else
    return "VSConstants.UICONTEXT." + name + "_string";
  }

    string GetWindowGuid(ToolWindow toolWindow)
    {
      if (string.IsNullOrEmpty(toolWindow.Window))
        return null;

      Guid guid;
      if (Guid.TryParse(toolWindow.Window, out guid))
        return guid.ToString();

      var window = toolWindow.Store.ElementDirectory.AllElements.OfType<ToolWindow>().FirstOrDefault(w => w.Name == toolWindow.Window);
      if (window != null)
        return window.Guid.ToString();

      if(toolWindow.Window == "Solution Explorer")
        return "3ae79031-e1bc-11d0-8f78-00a0c9110057";
      else if(toolWindow.Window == "Property Browser")
        return "eefa5220-e298-11d0-8f78-00a0c9110057";
      else if(toolWindow.Window == "Toolbox")
        return "b1e99781-ab81-11d0-b683-00aa00a3ee26";
      else if(toolWindow.Window == "Error List")
        return "d78612c7-9962-4b83-95d9-268046dad23a";
      else if(toolWindow.Window == "Output Window")
        return "34e76e81-ee4a-11d0-ae2e-00a0c90fffc3";
      else if(toolWindow.Window == "Command Window")
        return "28836128-fc2c-11d2-a433-00c04f72d18a";
      else if(toolWindow.Window == "Server Explorer")
        return "74946827-37a0-11d2-a273-00c04f8ef4ff";
      else if(toolWindow.Window == "Team Explorer")
        return "131369f2-062d-44a2-8671-91ff31efb4f4";
      else if(toolWindow.Window == "")
        return "";

      return null;
    }
#>