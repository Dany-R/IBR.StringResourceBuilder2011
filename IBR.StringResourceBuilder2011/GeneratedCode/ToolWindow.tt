<#@ template Debug="True" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ VSPackageDesigner processor="VSPackageDesignerDirectiveProcessor" requires="fileName='..\IBR.StringResourceBuilder2011.vspackage'" #>
<#@ Parameter Name="ToolWindowName" Type="System.String" #>
<#@ Parameter Name="IsWpf" Type="System.Boolean" #>
<#@ Parameter Name="Guid" Type="System.Guid" #>
<#@ output extension=".cs" #>

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.Shell;

namespace <#= this.Root.CommandTable.SafeProjectName #>
{
  /// <summary>
  /// This class implements the tool window <#= ToolWindowName #>ToolWindow exposed by this package and hosts a user control.
  ///
  /// In Visual Studio tool windows are composed of a frame (implemented by the shell) and a pane,
  /// usually implemented by the package implementer.
  ///
  /// This class derives from the ToolWindowPane class provided from the MPF in order to use its
  /// implementation of the IVsUIElementPane interface.
  /// </summary>
  [Guid("<#= Guid.ToString() #>")]
  public class <#= ToolWindowName #>ToolWindow : <#= ToolWindowName #>ToolWindowBase
  {
<#
  if (!IsWpf)
  {
#>
    <#= ToolWindowName #>Control control = new <#= ToolWindowName #>Control();

<#
  }
#>
    /// <summary>
    /// Standard constructor for the tool window.
    /// </summary>
    public <#= ToolWindowName #>ToolWindow()
    {
<#
  if (IsWpf)
  {
#>
      base.Content = new <#= ToolWindowName +"Control" #>();
<#
  }
#>
    }
<#
  if (!IsWpf)
  {
#>

    public override System.Windows.Forms.IWin32Window Window
    {
      get { return control; }
    }
<#
  }
#>
  } //class
} //namespace
